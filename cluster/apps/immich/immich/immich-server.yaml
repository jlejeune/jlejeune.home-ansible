---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: immich-library
  namespace: immich
  labels:
    app.kubernetes.io/instance: immich
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 200Gi
  storageClassName: nfs
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: immich-server
  namespace: immich
  labels:
    app.kubernetes.io/instance: immich
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/instance: immich
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app.kubernetes.io/instance: immich
    spec:
      restartPolicy: Always
      initContainers:
        - name: postgresql-isready
          image: postgres:15.5
          env:
            - name: POSTGRES_USER
              valueFrom:
                configMapKeyRef:
                  name: immich
                  key: DB_USERNAME
            - name: POSTGRES_DB
              valueFrom:
                configMapKeyRef:
                  name: immich
                  key: DB_DATABASE_NAME
          command:
            - /bin/sh
            - -c
            - until pg_isready -U "${POSTGRES_USER}" -d
              "dbname=${POSTGRE_DB}" -h immich-db -p 5432 ; do
              sleep 2 ; done
      containers:
        - name: immich
          image: altran1502/immich-server:v1.91.4
          imagePullPolicy: IfNotPresent
          env:
            - name: NODE_ENV
              value: "production"
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: immich
                  key: DB_PASSWORD
            - name: TYPESENSE_API_KEY
              valueFrom:
                secretKeyRef:
                  name: immich
                  key: TYPESENSE_API_KEY
          envFrom:
            - configMapRef:
                name: immich
                optional: false
          # envFromSecret:
          #  - secretRef:
          #      name: immich
          #      optional: false
          ports:
            - containerPort: 3001
          command:
            - /bin/sh
          args:
            - ./start-server.sh
          volumeMounts:
            - name: geocoding-dump
              mountPath: /usr/src/app/.reverse-geocoding-dump
            - name: library
              mountPath: /usr/src/app/upload
          resources:
            requests:
              cpu: "1"
              memory: "2Gi"
      volumes:
        - name: geocoding-dump
          emptyDir: {}
        - name: library
          persistentVolumeClaim:
            claimName: immich-library
      affinity:
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 1
              preference:
                matchExpressions:
                  - key: kubernetes.io/arch
                    operator: In
                    values:
                      - amd64
---
apiVersion: v1
kind: Service
metadata:
  name: immich-server
  namespace: immich
spec:
  ports:
    - port: 80
      targetPort: 3001
      protocol: TCP
  selector:
    app.kubernetes.io/instance: immich
---
apiVersion: traefik.io/v1alpha1
kind: IngressRoute
metadata:
  name: immich
  namespace: immich
spec:
  entryPoints:
    - websecure
  routes:
    - kind: Rule
      match: "Host(`photos.${SECRET_DOMAIN}`) && PathPrefix(`/`)"
      middlewares:
        - name: security-header
          namespace: networking
      services:
        - kind: Service
          name: immich-server
          namespace: immich
          port: 80
          scheme: http
  tls:
    secretName: "${SECRET_DOMAIN}-tls"
