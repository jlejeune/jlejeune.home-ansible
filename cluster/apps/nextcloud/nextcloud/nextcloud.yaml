---
apiVersion: v1
kind: ConfigMap
metadata:
  name: nextcloud
  namespace: nextcloud
  annotations:
    reloader.stakater.com/match: "true"
data:
  MYSQL_DATABASE: nextcloud
  MYSQL_USER: nextcloud
  MYSQL_HOST: nextcloud-db
  REDIS_HOST: nextcloud-redis
  SMTP_PORT: "587"
  SMTP_SECURE: tls
  PHP_MEMORY_LIMIT: "512M"
  OVERWRITEPROTOCOL: "https"
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: nextcloud-custom-script
  namespace: nextcloud
data:
  custom-script.sh: |
    #!/bin/sh

    apt-get update

    apt-get install -y --no-install-recommends \
        ffmpeg \
        ghostscript \
        libmagickcore-6.q16-6-extra \
        procps \
        smbclient \
        supervisor

    apt-get install -y --no-install-recommends \
        libbz2-dev \
        libc-client-dev \
        libkrb5-dev \
        libsmbclient-dev

    docker-php-ext-configure imap --with-kerberos --with-imap-ssl
    docker-php-ext-install \
        bz2 \
        imap
    pecl install smbclient
    docker-php-ext-enable smbclient
---
apiVersion: v1
kind: Service
metadata:
  name: nextcloud
  namespace: nextcloud
spec:
  ports:
    - name: http
      port: 80
      targetPort: http
  selector:
    app.kubernetes.io/instance: nextcloud
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: nextcloud-pv
  namespace: nextcloud
spec:
  storageClassName: longhorn
  persistentVolumeReclaimPolicy: Retain
  capacity:
    storage: 50Gi
  volumeMode: Filesystem
  accessModes:
    - ReadWriteOnce
  csi:
    driver: driver.longhorn.io
    fsType: ext4
    volumeAttributes:
      numberOfReplicas: '2'
      staleReplicaTimeout: '2880'
    volumeHandle: nextcloud-pv  # we have to create it manually on longhorn UI first
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: nextcloud-pvc
  namespace: nextcloud
spec:
  storageClassName: longhorn
  volumeName: nextcloud-pv
  volumeMode: Filesystem
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 50Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nextcloud
  namespace: nextcloud
  labels:
    app.kubernetes.io/instance: nextcloud
  annotations:
    reloader.stakater.com/search: "true"
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/instance: nextcloud
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app.kubernetes.io/instance: nextcloud
    spec:
      restartPolicy: Always
      containers:
        - name: nextcloud
          image: nextcloud:30.0.0
          imagePullPolicy: IfNotPresent
          env:
            - name: TZ
              value: "${TZ}"
            - name: NEXTCLOUD_TRUSTED_DOMAINS
              value: "nextcloud.${SECRET_DOMAIN}"
            - name: OVERWRITEHOST
              value: "nextcloud.${SECRET_DOMAIN}:443"
            - name: OVERWRITECLIURL
              value: "https://nextcloud.${SECRET_DOMAIN}"
          envFrom:
            - secretRef:
                name: nextcloud
                optional: false
            - configMapRef:
                name: nextcloud
                optional: false
          ports:
            - containerPort: 80
              name: http
          lifecycle:
            postStart:
              exec:
                command: ["/bin/sh", "-c", "/custom-script.sh"]
          volumeMounts:
            - mountPath: /var/www/html
              name: nextcloud-vol
            - mountPath: /custom-script.sh
              name: custom-script
              readOnly: true
              subPath: custom-script.sh
        - name: nextcloud-cron
          image: nextcloud:30.0.0
          imagePullPolicy: IfNotPresent
          command:
            - /cron.sh
          volumeMounts:
            - mountPath: /var/www/html
              name: nextcloud-vol
      volumes:
        - name: nextcloud-vol
          persistentVolumeClaim:
            claimName: nextcloud-pvc
        - name: custom-script
          configMap:
            name: nextcloud-custom-script
            defaultMode: 0744
            items:
              - key: custom-script.sh
                path: custom-script.sh
      affinity:
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 80
              preference:
                matchExpressions:
                  - key: kubernetes.io/arch
                    operator: In
                    values:
                      - amd64
